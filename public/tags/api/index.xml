<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api on vNinja.net</title>
    <link>/tags/api/</link>
    <description>Recent content in Api on vNinja.net</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>yourname@example.com (Christian Mohn)</managingEditor>
    <webMaster>yourname@example.com (Christian Mohn)</webMaster>
    <copyright>(c) 2018 Copyright my blog</copyright>
    <lastBuildDate>Tue, 09 Aug 2016 22:21:07 +0000</lastBuildDate>
    
	<atom:link href="/tags/api/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using CloudFlare for Dynamic DNS</title>
      <link>/homelab/using-cloudflare-for-dynamic-dns/</link>
      <pubDate>Tue, 09 Aug 2016 22:21:07 +0000</pubDate>
      <author>yourname@example.com (Christian Mohn)</author>
      <guid>/homelab/using-cloudflare-for-dynamic-dns/</guid>
      <description>In my previous post, I tried to lay out the foundation and reasoning behind requiring a Dynamic DNS Service, and here is how I solved it using CloudFlare.
First of all, I moved my chosen domain name to CloudFlare, and made sure everything resolved ok with static records. Once that was working, I started playing around with the CloudFlare API, usingÂ Cocoa Rest Client. I&amp;rsquo;m no developer (as is probably very apparent by the script below), nor API wizard of any kind, but it was fairly easy figuring out how to craft a request that lists my DNS zone.</description>
    </item>
    
  </channel>
</rss>